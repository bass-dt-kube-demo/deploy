@Library('dynatrace@master') _

def tagMatchRules = [
  [
    meTypes: [
      [meType: 'SERVICE']
    ],
    tags : [
      [ context: 'CONTEXTLESS', key: 'environment', value: 'production' ]
    ]
  ]
]

pipeline {
  agent {
    label 'maven'
  }
  parameters {
    string  (name: 'version', defaultValue: 'good', description: 'pass in value bad to deploy bad version')
  }
  stages {
    stage('Deploy') {
      steps {
        script {
          echo "params.version = {$params.version}"
          if (params.version == 'bad')
          {
            echo "Deploying BAD version..."

            // push event using Jenkins plugin
            // https://github.com/jenkinsci/performance-signature-dynatrace-plugin/blob/master/dynatrace/README.md
            createDynatraceDeploymentEvent(
              envId: 'Dynatrace Tenant', 
              tagMatchRules: tagMatchRules) {
                checkout scm
                container('kubectl') {
                  sh "kubectl apply -f production-bad.yml"
                }
            }
          }
          else
          {
            echo "Deploying GOOD version..."

            // push event using Jenkins plugin
            // https://github.com/jenkinsci/performance-signature-dynatrace-plugin/blob/master/dynatrace/README.md
            createDynatraceDeploymentEvent(
              envId: 'Dynatrace Tenant', 
              tagMatchRules: tagMatchRules) {
                checkout scm
                container('kubectl') {
                  sh "kubectl apply -f production.yml"
                }
            }
          }
        }
      }
    }

    stage('Health Check') {
      steps {
        container('curl') {
          echo "Waiting for the service to start..."
          sleep 20
          echo "Execute a couple of CURL commands to verify UI is up..."
          executeCurl(2, "http://front-end.production")
        }
      }
    }
  }
}

def executeCurl(iterations, url) {
    for (int i = 0; i < iterations; i++) {
        sh "echo calling ${url}"
        sh "curl ${url} -f"
    }
}